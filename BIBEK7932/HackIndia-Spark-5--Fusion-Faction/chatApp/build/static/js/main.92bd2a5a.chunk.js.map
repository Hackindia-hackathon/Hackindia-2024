{"version":3,"sources":["components/arrow.png","components/Chat.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Chat","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fixedChats","msg","response","chats","inputValue","accounts","account","nbBlocks","otherAccount","accountNbTransactions","otherAccountNbTransactions","accountBalance","otherAccountBalance","lastGas","blockHash","didATransaction","isLastTransactionSuccess","didARequest","accountRequesting","accountRequested","valueRequested","loadWeb3","loadBlockchainData","listenToMessages","listenToEther","listenToAskEther","listenToFetchAllMsg","fetchAllMsg","updateUIData","window","ethereum","web3","Web3","providers","WebsocketProvider","enable","alert","eth","getAccounts","setState","console","log","getBalance","ethBalance","net","getId","networkId","chatAppData","ChatApp","networks","abi","chatContract","Contract","address","binded","didReceiveMessageBinded","bind","events","messageSentEvent","on","error","didReceiveEtherBinded","etherSentEvent","didReceiveAskEtherBinded","etherAskEvent","didReceiveAllMsgBinded","messagesFetchedEvent","event","message","returnValues","from","didReceiveMessage","to","success","value_as_wei","utils","fromWei","value","allMsg","messages","forEach","push","_this2","length","isResponse","methods","sendMsg","send","gas","sendEtherIfAsked","askEtherIfAsked","splitted","split","isNumeric","asWei","parseFloat","sendEther","toString","askEther","getAllMsg","updateNbTransactions","updateBalances","updateBlocks","updateLastGas","evt","target","newValue","isOtherAccount","wait","getTransactionCount","getBlockNumber","latest","lastBlockNumber","getBlock","block","lastTransaction","transactions","getTransaction","transaction","map","x","react_default","a","createElement","class","reverse","addresses","i","selected","style","color","_this3","valueAsEther","valueAsWei","className","onClick","str","isNaN","_this4","src","mainLogo","alt","onChange","e","updateAddressSelect","getToggleAdresses","getMessagesAsDivs","fontSize","aria-hidden","updateInputValue","type","placeholder","didSendMessage","displayEtherTransactionStatus","displayAskEtherPopUp","Component","App","components_Chat","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92bd2a5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.11152e05.png\";","import Web3 from 'web3';\r\nimport React, { Component } from 'react';\r\nimport ChatApp from '../abis/ChatApp.json'\r\nimport mainLogo from './arrow.png'\r\n\r\nclass Chat extends Component {\r\n\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n        await this.listenToMessages()\r\n        await this.listenToEther()\r\n        await this.listenToAskEther()\r\n        await this.listenToFetchAllMsg()\r\n        await this.fetchAllMsg()\r\n        await this.updateUIData()\r\n      }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        let chats = [\r\n            {\r\n                msg: \"This is a blockchain demo, try to tap in!\",\r\n                response: true\r\n            },\r\n            {\r\n                msg: \"Enter \\\"send_ether: 0.0001\\\" to send some tokens to your recipient 😃\",\r\n                response: false\r\n            }\r\n        ]\r\n        this.state = {\r\n            fixedChats: chats,\r\n            chats: [],\r\n            inputValue: '',\r\n            accounts: [],\r\n            account: '',\r\n            nbBlocks: 0,\r\n            otherAccount: '',\r\n            accountNbTransactions: 0,\r\n            otherAccountNbTransactions: 0,\r\n            accountBalance: 0,\r\n            otherAccountBalance: 0,\r\n            lastGas: 0,\r\n            blockHash: '',\r\n            didATransaction: false,\r\n            isLastTransactionSuccess: false,\r\n            didARequest: false,\r\n            accountRequesting: '',\r\n            accountRequested: '',\r\n            valueRequested: 0,\r\n        }\r\n    }\r\n\r\n    // ------- init ------\r\n    async loadWeb3() {\r\n        if (window.ethereum) {\r\n    \r\n          // Need to put ws:// instead of http:// because of web sockets.\r\n          // Web sockets are mandatory to listen to events.\r\n          window.web3 = new Web3(Web3.providers.WebsocketProvider(\"ws://localhost:7545\"))\r\n          await window.ethereum.enable()\r\n        }\r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.ethereum)\r\n        }\r\n        else {\r\n          window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n        }\r\n      }\r\n\r\n    async loadBlockchainData()  {\r\n        const web3 = window.web3\r\n    \r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({ \r\n            accounts: accounts,\r\n            account: accounts[0],\r\n            otherAccount: accounts[1]\r\n         })\r\n        console.log(accounts)\r\n    \r\n        const ethBalance = await web3.eth.getBalance(this.state.account)\r\n        this.setState({ ethBalance })\r\n    \r\n        // Load smart contract\r\n        const networkId =  await web3.eth.net.getId()\r\n        const chatAppData = ChatApp.networks[networkId]\r\n        const abi = ChatApp.abi\r\n        if(chatAppData) {\r\n          const chatContract = new web3.eth.Contract(abi, chatAppData.address)\r\n          this.setState({ chatContract: chatContract })\r\n        }\r\n        else {\r\n            window.alert('Chat contract not deployed to detected network.')\r\n        }\r\n    }\r\n\r\n    // ------- listeners ------\r\n    async listenToMessages() {\r\n        var binded = this.didReceiveMessageBinded.bind(this)\r\n        this.state.chatContract.events.messageSentEvent({})\r\n        .on('data', binded)\r\n        .on('error', console.error);\r\n    }\r\n\r\n    async listenToEther() {\r\n        var binded = this.didReceiveEtherBinded.bind(this)\r\n        this.state.chatContract.events.etherSentEvent({})\r\n        .on('data', binded)\r\n        .on('error', console.error);\r\n    }\r\n\r\n    async listenToAskEther() {\r\n        var binded = this.didReceiveAskEtherBinded.bind(this)\r\n        this.state.chatContract.events.etherAskEvent({})\r\n        .on('data', binded)\r\n        .on('error', console.error);\r\n    }\r\n\r\n    async listenToFetchAllMsg() {\r\n        var binded = this.didReceiveAllMsgBinded.bind(this)\r\n        this.state.chatContract.events.messagesFetchedEvent({})\r\n        .on('data', binded)\r\n        .on('error', console.error);\r\n    }\r\n\r\n    // ------- handlers ------\r\n    async didReceiveMessageBinded(event){\r\n        const message = event.returnValues.message\r\n        if (event.returnValues.from === this.state.account){\r\n            this.didReceiveMessage(message, true)\r\n        }\r\n        if (event.returnValues.to === this.state.account){\r\n            this.didReceiveMessage(message, false)\r\n        }\r\n        this.setState({\r\n            didATransaction: false,\r\n            didARequest: false,\r\n        })\r\n        await this.updateUIData()\r\n    }\r\n\r\n    async didReceiveEtherBinded(event) {\r\n        this.setState({\r\n            didATransaction: true,\r\n            didARequest: false,\r\n            isLastTransactionSuccess: event.returnValues.success\r\n        })\r\n        // await this.wait()\r\n        await this.updateUIData()\r\n    }\r\n\r\n    async didReceiveAskEtherBinded(event){\r\n        if (this.state.account === event.returnValues.to) {\r\n            let value_as_wei = window.web3.utils.fromWei(\r\n                event.returnValues.value, \"ether\")\r\n    \r\n            this.setState({\r\n                didATransaction: false,\r\n                didARequest: true,\r\n                accountRequesting: event.returnValues.from,\r\n                accountRequested: event.returnValues.to,\r\n                valueRequested: value_as_wei,\r\n            })\r\n            await this.updateUIData()\r\n        }\r\n    }\r\n\r\n    async didReceiveAllMsgBinded(event){\r\n        let allMsg = []\r\n\r\n        event.returnValues.messages.forEach((message) => {\r\n            allMsg.push({\r\n                msg: message['message'],\r\n                response: message['from'] === this.state.account\r\n            })\r\n        })\r\n        if (allMsg.length === 0)\r\n            allMsg = this.state.fixedChats\r\n\r\n        this.setState({\r\n            chats: allMsg\r\n        })\r\n        await this.updateUIData()\r\n    }\r\n\r\n    async didReceiveMessage(message, isResponse) {\r\n        let chats = this.state.chats\r\n        chats.push(\r\n            {\r\n                msg: message,\r\n                response: isResponse\r\n            }\r\n        )\r\n        this.setState({\r\n            chats: chats,\r\n            inputValue: ''\r\n        })\r\n    }\r\n\r\n    async didSendMessage(message) {\r\n        this.state.chatContract.methods.sendMsg(this.state.otherAccount, message)\r\n            .send({ from: this.state.account, gas: 1500000 })\r\n        await this.sendEtherIfAsked()\r\n        await this.askEtherIfAsked()\r\n    }\r\n\r\n    async sendEtherIfAsked() {\r\n        let splitted = this.state.inputValue.split(':')\r\n        if (splitted.length !== 2)\r\n            return false\r\n\r\n        if (splitted[0] === \"send_ether\" && this.isNumeric(splitted[1])) {\r\n            let asWei = parseFloat(splitted[1]) * 1e18\r\n            this.state.chatContract.methods.sendEther(this.state.otherAccount).send({\r\n                from: this.state.account,\r\n                value: asWei\r\n            })\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    async askEtherIfAsked() {\r\n        let splitted = this.state.inputValue.split(':')\r\n        if (splitted.length !== 2)\r\n            return false\r\n\r\n        if (splitted[0] === \"ask_ether\" && this.isNumeric(splitted[1])) {\r\n            var asWei = (parseFloat(splitted[1]) * 1e18).toString()\r\n            this.state.chatContract.methods.askEther(this.state.otherAccount, asWei).send({ from: this.state.account })\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    async fetchAllMsg() {\r\n        await this.state.chatContract.methods.getAllMsg(this.state.otherAccount).send({ from: this.state.account })\r\n    }\r\n\r\n    // ------- UI state updaters ------\r\n    async updateUIData() {\r\n        await this.updateNbTransactions()\r\n        await this.updateBalances()\r\n        await this.updateBlocks()\r\n        await this.updateLastGas()\r\n    }\r\n\r\n    updateInputValue(evt) {\r\n        this.setState({\r\n          inputValue: evt.target.value\r\n        });\r\n      }\r\n\r\n    async updateAddressSelect(newValue, isOtherAccount) {\r\n        if (isOtherAccount) {\r\n            this.setState({\r\n                otherAccount: newValue,\r\n                chats: this.state.fixedChats\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                account: newValue,\r\n                chats: this.state.fixedChats\r\n            })\r\n        }\r\n        await this.wait()\r\n        await this.fetchAllMsg()\r\n        await this.updateUIData()\r\n    }\r\n\r\n    async updateNbTransactions() {\r\n        let accountNbTransactions = await window.web3.eth.getTransactionCount(this.state.account)\r\n        let otherAccountNbTransactions = await window.web3.eth.getTransactionCount(this.state.otherAccount)\r\n        this.setState({\r\n            accountNbTransactions: accountNbTransactions,\r\n            otherAccountNbTransactions: otherAccountNbTransactions\r\n        })\r\n    }\r\n\r\n    async updateBalances() {\r\n        let accountBalance = await window.web3.eth.getBalance(this.state.account)\r\n        let otherAccountBalance = await window.web3.eth.getBalance(this.state.otherAccount)\r\n        this.setState({\r\n            accountBalance: window.web3.utils.fromWei(accountBalance, 'ether'),\r\n            otherAccountBalance: window.web3.utils.fromWei(otherAccountBalance, 'ether')\r\n        })\r\n    }\r\n\r\n    async updateBlocks() {\r\n        const latest = await window.web3.eth.getBlockNumber()\r\n        this.setState({\r\n            nbBlocks: latest\r\n        })\r\n    }\r\n\r\n    async updateLastGas() {\r\n        const lastBlockNumber = await window.web3.eth.getBlockNumber();\r\n        let block = await window.web3.eth.getBlock(lastBlockNumber);\r\n        block = await window.web3.eth.getBlock(lastBlockNumber);\r\n\r\n        const lastTransaction = block.transactions[block.transactions.length - 1];\r\n        const transaction = await window.web3.eth.getTransaction(lastTransaction);\r\n\r\n        this.setState({\r\n            blockHash: transaction[\"blockHash\"],\r\n            lastGas: transaction[\"gas\"],\r\n        })\r\n    }\r\n\r\n    // ------- UI ------\r\n    getMessagesAsDivs() {\r\n        let chatDivs = this.state.chats.map(x => x.response ? \r\n            <div class=\"message text-only\">\r\n                <div class=\"response\">\r\n                    <p class=\"text\"> {x.msg} </p>\r\n                    </div>\r\n                </div> :\r\n            <div class=\"message text-only\">\r\n                <p class=\"text\"> {x.msg} </p>\r\n            </div>\r\n        )\r\n        return chatDivs.reverse()\r\n    }\r\n\r\n    getToggleAdresses(isOtherAccount) {\r\n        var addresses = []\r\n        for (var i = 0; i < this.state.accounts.length; i++) {\r\n            let account = this.state.accounts[i]\r\n            if ((isOtherAccount && account === this.state.otherAccount)\r\n                || (!isOtherAccount && account === this.state.account))\r\n                addresses.push(<option value={account} selected>{account}</option>)\r\n            else {\r\n                addresses.push(<option value={account}>{account}</option>)\r\n            }\r\n        }\r\n        return addresses\r\n    }\r\n\r\n    displayEtherTransactionStatus() {\r\n        if (!this.state.didATransaction)\r\n            return\r\n\r\n        if (this.state.isLastTransactionSuccess)\r\n            return <div style={{color: \"green\"}}>ETH transaction succeeded!</div>\r\n        else\r\n            return <div>error</div>\r\n    }\r\n\r\n    displayAskEtherPopUp() {\r\n        let to = this.state.accountRequested\r\n        let valueAsEther = this.state.valueRequested\r\n        let valueAsWei = parseFloat(this.state.valueRequested) * 1e18\r\n        \r\n        if (this.state.didARequest && to === this.state.account) {\r\n            return (\r\n            <div className=\"didAskContainer\">\r\n                <h6>Ether request</h6>\r\n                <p>Account { to } requests you { valueAsEther } ether.</p>\r\n                \r\n                <button className=\"btn btn-success send-btn\" onClick={() => this.state.chatContract.methods.sendEther(this.state.accountRequesting).send({\r\n                    from: to,\r\n                    value: valueAsWei\r\n                })}>Accept</button>\r\n            </div>\r\n            )\r\n        }\r\n        return\r\n    }\r\n\r\n    // ------- helpers ------\r\n    isNumeric(str) {\r\n        if (typeof str != \"string\") return false\r\n        return !isNaN(str) &&\r\n               !isNaN(parseFloat(str))\r\n      }\r\n\r\n    async wait() {\r\n        const noop = ()=>{};\r\n        for (var i = 0; i < 10000; i++)\r\n            noop()\r\n    }\r\n\r\n    // ------- rendering ------\r\n    render() {\r\n        return (\r\n        \r\n            <div className=\"block-container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-7 left-block\">\r\n                        <section className=\"chat\">\r\n                            <div className=\"header-chat\">\r\n                                <div className=\"left\">\r\n                                    <img src={mainLogo} className=\"arrow\" alt='arrow'/>\r\n                                    <select className=\"custom-select\" onChange={e => this.updateAddressSelect(e.target.value, false)} >\r\n                                        { this.getToggleAdresses(false) }\r\n                                    </select>     \r\n                                </div>\r\n                                <div className=\"right\">\r\n                                    <select className=\"custom-select\" onChange={e => this.updateAddressSelect(e.target.value, true)} >\r\n                                        { this.getToggleAdresses(true) }\r\n                                    </select>  \r\n                                </div>\r\n                            </div>\r\n                            <div className=\"messages-chat\">\r\n                            { this.getMessagesAsDivs() }\r\n                            </div>\r\n                        </section>\r\n                        <div className=\"footer-chat\">\r\n                            <i className=\"icon fa fa-smile-o clickable\" style={{fontSize: \"25pt\"}} aria-hidden=\"true\"></i>\r\n                            <input value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)} type=\"text\" className=\"write-message\" placeholder=\"Type your message here\"></input>\r\n                            <i className=\"icon send fa fa-paper-plane-o clickable\" aria-hidden=\"true\"></i>\r\n                            <button className=\"btn btn-success send-btn\" onClick={() => this.didSendMessage(this.state.inputValue)}>Send</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-5 right-block\">\r\n                        <h3>Blockchain state</h3>\r\n                        <p>Number of blocks: { this.state.nbBlocks }</p>\r\n                        <p>Last transaction gas: { this.state.lastGas }</p>\r\n                        <div className=\"sender-block blockchain-block\">\r\n                            <p><b>Sender address:</b></p>\r\n                            <p>{ this.state.account }</p>\r\n                            <p>Number of transactions: { this.state.accountNbTransactions }</p>\r\n                            <p>Wallet balance: { this.state.accountBalance } ETH</p>\r\n                        </div>\r\n                        <div className=\"recip-block blockchain-block\">\r\n                            <p><b>Recipient address:</b></p>\r\n                            <p>{ this.state.otherAccount }</p>\r\n                            <p>Number of transactions: { this.state.otherAccountNbTransactions }</p>\r\n                            <p>Wallet balance: { this.state.otherAccountBalance } ETH</p>\r\n                        </div>\r\n\r\n                        <div className=\"alert-transac\">\r\n                            { this.displayEtherTransactionStatus() }\r\n                        </div>\r\n                        <div className=\"alert-request\">\r\n                            { this.displayAskEtherPopUp() }\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n                \r\n                </div>\r\n      )\r\n    }\r\n\r\n}\r\n\r\nexport default Chat;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Chat from \"./Chat\";\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Chat></Chat>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}